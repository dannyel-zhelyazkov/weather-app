{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { weatherService } from '../../api';\nimport { parseWeatherObject } from '../../utils';\nimport { STANDARD_UNIT, WEATHER_METRIC_KEY } from '../../common/constants';\nconst initialState = {\n  locationName: '',\n  weather: undefined,\n  isWeatherLoading: undefined\n};\nexport const weatherSlice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    setWeather: (state, action) => {\n      state.locationName = action.payload.name;\n      state.weather = parseWeatherObject(action.payload);\n    },\n    setIsWeatherLoading: (state, action) => {\n      state.isWeatherLoading = action.payload;\n    }\n  }\n});\nexport const fetchWeather = () => dispatch => {\n  try {\n    dispatch(setIsWeatherLoading(true));\n    navigator.geolocation.getCurrentPosition(async position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      const units = localStorage.getItem(WEATHER_METRIC_KEY) || STANDARD_UNIT;\n      const response = await weatherService().getWeather({\n        lat,\n        lon,\n        units\n      });\n      dispatch(setIsWeatherLoading(false));\n      dispatch(setWeather(response));\n    });\n  } catch (e) {\n    dispatch(setIsWeatherLoading(false));\n  }\n};\nexport const {\n  setWeather,\n  setIsWeatherLoading\n} = weatherSlice.actions;\nexport const weatherReducer = weatherSlice.reducer;","map":{"version":3,"names":["createSlice","weatherService","parseWeatherObject","STANDARD_UNIT","WEATHER_METRIC_KEY","initialState","locationName","weather","undefined","isWeatherLoading","weatherSlice","name","reducers","setWeather","state","action","payload","setIsWeatherLoading","fetchWeather","dispatch","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","units","localStorage","getItem","response","getWeather","e","actions","weatherReducer","reducer"],"sources":["/Users/maistor_dany/Projects/weather-app/src/store/weather/weather.slice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { AppDispatch } from '../index';\nimport { WeatherResponse, weatherService } from '../../api';\nimport { WeatherDisplay } from '../types';\nimport { parseWeatherObject } from '../../utils';\nimport { STANDARD_UNIT, WEATHER_METRIC_KEY } from '../../common/constants';\n\ntype WeatherState = {\n\tlocationName: string;\n\tweather?: WeatherDisplay;\n\tisWeatherLoading?: boolean;\n};\n\nconst initialState: WeatherState = {\n\tlocationName: '',\n\tweather: undefined,\n\tisWeatherLoading: undefined,\n};\n\nexport const weatherSlice = createSlice({\n\tname: 'weather',\n\tinitialState,\n\treducers: {\n\t\tsetWeather: (state, action: { payload: WeatherResponse }) => {\n\t\t\tstate.locationName = action.payload.name;\n\t\t\tstate.weather = parseWeatherObject(action.payload);\n\t\t},\n\t\tsetIsWeatherLoading: (state, action) => {\n\t\t\tstate.isWeatherLoading = action.payload;\n\t\t},\n\t},\n});\n\nexport const fetchWeather = () => (dispatch: AppDispatch) => {\n\ttry {\n\t\tdispatch(setIsWeatherLoading(true));\n\t\tnavigator.geolocation.getCurrentPosition(async (position) => {\n\t\t\tconst lat = position.coords.latitude;\n\t\t\tconst lon = position.coords.longitude;\n\n\t\t\tconst units = localStorage.getItem(WEATHER_METRIC_KEY) || STANDARD_UNIT;\n\t\t\tconst response = await weatherService().getWeather({\n\t\t\t\tlat,\n\t\t\t\tlon,\n\t\t\t\tunits,\n\t\t\t});\n\n\t\t\tdispatch(setIsWeatherLoading(false));\n\t\t\tdispatch(setWeather(response));\n\t\t});\n\t} catch (e) {\n\t\tdispatch(setIsWeatherLoading(false));\n\t}\n};\n\nexport const { setWeather, setIsWeatherLoading } = weatherSlice.actions;\n\nexport const weatherReducer = weatherSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,SAA0BC,cAAc,QAAQ,WAAW;AAE3D,SAASC,kBAAkB,QAAQ,aAAa;AAChD,SAASC,aAAa,EAAEC,kBAAkB,QAAQ,wBAAwB;AAQ1E,MAAMC,YAA0B,GAAG;EAClCC,YAAY,EAAE,EAAE;EAChBC,OAAO,EAAEC,SAAS;EAClBC,gBAAgB,EAAED;AACnB,CAAC;AAED,OAAO,MAAME,YAAY,GAAGV,WAAW,CAAC;EACvCW,IAAI,EAAE,SAAS;EACfN,YAAY;EACZO,QAAQ,EAAE;IACTC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAAoC,KAAK;MAC5DD,KAAK,CAACR,YAAY,GAAGS,MAAM,CAACC,OAAO,CAACL,IAAI;MACxCG,KAAK,CAACP,OAAO,GAAGL,kBAAkB,CAACa,MAAM,CAACC,OAAO,CAAC;IACnD,CAAC;IACDC,mBAAmB,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACvCD,KAAK,CAACL,gBAAgB,GAAGM,MAAM,CAACC,OAAO;IACxC;EACD;AACD,CAAC,CAAC;AAEF,OAAO,MAAME,YAAY,GAAGA,CAAA,KAAOC,QAAqB,IAAK;EAC5D,IAAI;IACHA,QAAQ,CAACF,mBAAmB,CAAC,IAAI,CAAC,CAAC;IACnCG,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,MAAOC,QAAQ,IAAK;MAC5D,MAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;MACpC,MAAMC,GAAG,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;MAErC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC3B,kBAAkB,CAAC,IAAID,aAAa;MACvE,MAAM6B,QAAQ,GAAG,MAAM/B,cAAc,CAAC,CAAC,CAACgC,UAAU,CAAC;QAClDT,GAAG;QACHG,GAAG;QACHE;MACD,CAAC,CAAC;MAEFV,QAAQ,CAACF,mBAAmB,CAAC,KAAK,CAAC,CAAC;MACpCE,QAAQ,CAACN,UAAU,CAACmB,QAAQ,CAAC,CAAC;IAC/B,CAAC,CAAC;EACH,CAAC,CAAC,OAAOE,CAAC,EAAE;IACXf,QAAQ,CAACF,mBAAmB,CAAC,KAAK,CAAC,CAAC;EACrC;AACD,CAAC;AAED,OAAO,MAAM;EAAEJ,UAAU;EAAEI;AAAoB,CAAC,GAAGP,YAAY,CAACyB,OAAO;AAEvE,OAAO,MAAMC,cAAc,GAAG1B,YAAY,CAAC2B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}