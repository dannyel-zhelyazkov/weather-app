{"ast":null,"code":"var _jsxFileName = \"/Users/maistor_dany/Projects/weather-app/src/pages/ForecastPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ForecastData, WeatherCard } from \"../components\";\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\nimport { Skeleton } from \"primereact/skeleton\";\nimport { fetchWeather } from \"../store/weather\";\nimport { convertMonthDayToId, convertToMonthDay } from \"../utils\";\nimport styles from \"../styles/pages/forecast-page.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ForecastPage = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    id\n  } = useParams();\n  const isLoading = useAppSelector(state => {\n    var _state$weather;\n    return (_state$weather = state.weather) === null || _state$weather === void 0 ? void 0 : _state$weather.isLoading;\n  });\n  const selectedDayForecast = useAppSelector(state => {\n    var _state$weather2, _state$weather2$weath;\n    return (_state$weather2 = state.weather) === null || _state$weather2 === void 0 ? void 0 : (_state$weather2$weath = _state$weather2.weather) === null || _state$weather2$weath === void 0 ? void 0 : _state$weather2$weath[id];\n  });\n  useEffect(() => {\n    if (id === convertMonthDayToId(convertToMonthDay())) {\n      dispatch(fetchWeather());\n    }\n  }, []);\n  const loadingWeatherTemplate = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"forecast-loading-card\",\n      className: styles.loadingWeatherSkeleton,\n      children: /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"250px\",\n        height: \"250px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingForecastContainer,\n      children: Array(8).fill(\"data\").map(() => /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-testid\": \"forecast-loading-card\",\n        className: styles.loadingForecastSkeleton,\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"100px\",\n          height: \"150px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loadingWeatherTemplate()\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(WeatherCard, {\n        className: styles.weather,\n        weather: selectedDayForecast.weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ForecastData, {\n        forecast: selectedDayForecast.forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n_s(ForecastPage, \"X2LEP4yvoHxcjf46HK2MGD/lVVQ=\", false, function () {\n  return [useAppDispatch, useParams, useAppSelector, useAppSelector];\n});\n_c = ForecastPage;\nvar _c;\n$RefreshReg$(_c, \"ForecastPage\");","map":{"version":3,"names":["React","useEffect","useParams","ForecastData","WeatherCard","useAppDispatch","useAppSelector","Skeleton","fetchWeather","convertMonthDayToId","convertToMonthDay","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","ForecastPage","_s","dispatch","id","isLoading","state","_state$weather","weather","selectedDayForecast","_state$weather2","_state$weather2$weath","loadingWeatherTemplate","children","className","loadingWeatherSkeleton","width","height","fileName","_jsxFileName","lineNumber","columnNumber","loadingForecastContainer","Array","fill","map","loadingForecastSkeleton","title","forecast","_c","$RefreshReg$"],"sources":["/Users/maistor_dany/Projects/weather-app/src/pages/ForecastPage.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ForecastData, WeatherCard } from \"../components\";\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\nimport { Skeleton } from \"primereact/skeleton\";\nimport { fetchWeather, fetchWeatherAndForecast } from \"../store/weather\";\nimport { convertMonthDayToId, convertToMonthDay } from \"../utils\";\nimport styles from \"../styles/pages/forecast-page.module.scss\";\nexport const ForecastPage: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { id } = useParams();\n  const isLoading = useAppSelector((state) => state.weather?.isLoading);\n  const selectedDayForecast = useAppSelector(\n    (state) => state.weather?.weather?.[id as string],\n  );\n\n  useEffect(() => {\n    if (id === convertMonthDayToId(convertToMonthDay())) {\n      dispatch(fetchWeather());\n    }\n  }, []);\n\n  const loadingWeatherTemplate = () => (\n    <>\n      <div\n        data-testid=\"forecast-loading-card\"\n        className={styles.loadingWeatherSkeleton}\n      >\n        <Skeleton width=\"250px\" height=\"250px\" />\n      </div>\n      <div className={styles.loadingForecastContainer}>\n        {Array(8)\n          .fill(\"data\")\n          .map(() => (\n            <div\n              data-testid=\"forecast-loading-card\"\n              className={styles.loadingForecastSkeleton}\n            >\n              <Skeleton width=\"100px\" height=\"150px\" />\n            </div>\n          ))}\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      <h1 className={styles.title}>Forecast</h1>\n      {isLoading ? (\n        <>{loadingWeatherTemplate()}</>\n      ) : (\n        <>\n          <WeatherCard\n            className={styles.weather}\n            weather={selectedDayForecast.weather}\n          />\n          <ForecastData forecast={selectedDayForecast.forecast} />\n        </>\n      )}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}