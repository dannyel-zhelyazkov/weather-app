{"ast":null,"code":"import { convertToHoursMinutes, convertToMonthDay } from \"./date.util\";\nimport moment from \"moment\";\nexport const convertMonthDayToId = date => date.split(\" \").join(\"-\").toLowerCase();\nexport const parseToCurrentWeather = data => ({\n  date: convertToMonthDay(),\n  temp: Math.round(data.main.temp),\n  icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${data.weather[0].icon}@2x.png`,\n  description: data.weather[0].description.charAt(0).toUpperCase() + data.weather[0].description.slice(1),\n  // make the first letter of the description upper case\n  main: data.weather[0].main,\n  time: convertToHoursMinutes()\n});\nexport const reduceForecastData = data => {\n  const reduced = data.list.reduce((acc, current) => {\n    const key = convertToMonthDay(current.dt_txt);\n    const forecast = {\n      time: convertToHoursMinutes(current.dt_txt),\n      temp: Math.round(current.main.temp),\n      icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${current.weather[0].icon}@2x.png`,\n      main: current.weather[0].main,\n      description: current.weather[0].description.charAt(0).toUpperCase() + current.weather[0].description.slice(1),\n      // make the first letter of the description upper case,\n      date: convertToMonthDay(key)\n    };\n    if (!acc[key]) {\n      acc[key] = [forecast];\n      return acc;\n    }\n    acc[key].push(forecast);\n    return acc;\n  }, {});\n  return Object.entries(reduced).splice(0, 5);\n};\nexport const parseWeatherForecastData = data => {\n  const result = {};\n  const today = data.weatherData;\n  const todayKey = convertMonthDayToId(convertToMonthDay());\n  const forecasts = reduceForecastData(data.forecastData);\n  result[todayKey] = {\n    weather: parseToCurrentWeather(today),\n    forecast: forecasts[0][1]\n  };\n  forecasts.splice(1, 5).forEach(value => {\n    const weatherObj = value[1][Math.floor(moment().hour() / 3)]; // current time divided by 3 gives the index of the current's forecast weather\n    result[convertMonthDayToId(value[0])] = {\n      weather: weatherObj,\n      forecast: value[1]\n    };\n  });\n  return result;\n};","map":{"version":3,"names":["convertToHoursMinutes","convertToMonthDay","moment","convertMonthDayToId","date","split","join","toLowerCase","parseToCurrentWeather","data","temp","Math","round","main","icon","process","env","REACT_APP_WEATHER_ICONS_URL","weather","description","charAt","toUpperCase","slice","time","reduceForecastData","reduced","list","reduce","acc","current","key","dt_txt","forecast","push","Object","entries","splice","parseWeatherForecastData","result","today","weatherData","todayKey","forecasts","forecastData","forEach","value","weatherObj","floor","hour"],"sources":["/Users/maistor_dany/Projects/weather-app/src/utils/weather.util.ts"],"sourcesContent":["import { convertToHoursMinutes, convertToMonthDay } from \"./date.util\";\nimport { ForecastResponse, WeatherResponse } from \"../api\";\nimport { WeatherData, WeatherDisplay } from \"../store\";\nimport { ForecastData } from \"../api/types\";\nimport moment from \"moment\";\n\nexport const convertMonthDayToId = (date: string) =>\n  date.split(\" \").join(\"-\").toLowerCase();\n\nexport const parseToCurrentWeather = (data: WeatherResponse) => ({\n  date: convertToMonthDay(),\n  temp: Math.round(data.main.temp),\n  icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${data.weather[0].icon}@2x.png`,\n  description:\n    data.weather[0].description.charAt(0).toUpperCase() +\n    data.weather[0].description.slice(1), // make the first letter of the description upper case\n  main: data.weather[0].main,\n  time: convertToHoursMinutes(),\n});\n\nexport const reduceForecastData = (data: ForecastResponse) => {\n  const reduced = data.list.reduce(\n    (acc: { [key: string]: WeatherDisplay[] }, current: ForecastData) => {\n      const key = convertToMonthDay(current.dt_txt);\n      const forecast: WeatherDisplay = {\n        time: convertToHoursMinutes(current.dt_txt),\n        temp: Math.round(current.main.temp),\n        icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${current.weather[0].icon}@2x.png`,\n        main: current.weather[0].main,\n        description:\n          current.weather[0].description.charAt(0).toUpperCase() +\n          current.weather[0].description.slice(1), // make the first letter of the description upper case,\n        date: convertToMonthDay(key),\n      };\n\n      if (!acc[key]) {\n        acc[key] = [forecast];\n\n        return acc;\n      }\n\n      acc[key].push(forecast);\n\n      return acc;\n    },\n    {},\n  );\n\n  return Object.entries(reduced).splice(0, 5);\n};\n\nexport const parseWeatherForecastData = (data: {\n  weatherData: WeatherResponse;\n  forecastData: ForecastResponse;\n}): WeatherData => {\n  const result: WeatherData = {};\n\n  const today = data.weatherData;\n  const todayKey = convertMonthDayToId(convertToMonthDay());\n\n  const forecasts = reduceForecastData(data.forecastData);\n\n  result[todayKey] = {\n    weather: parseToCurrentWeather(today),\n    forecast: forecasts[0][1],\n  };\n\n  forecasts.splice(1, 5).forEach((value) => {\n    const weatherObj = value[1][Math.floor(moment().hour() / 3)]; // current time divided by 3 gives the index of the current's forecast weather\n    result[convertMonthDayToId(value[0])] = {\n      weather: weatherObj,\n      forecast: value[1],\n    };\n  });\n\n  return result;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}