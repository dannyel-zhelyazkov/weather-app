{"ast":null,"code":"var _jsxFileName = \"/Users/maistor_dany/Projects/weather-app/src/pages/ForecastPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ForecastData, WeatherCard } from \"../components\";\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\nimport { Skeleton } from \"primereact/skeleton\";\nimport { fetchWeather } from \"../store/weather\";\nimport { convertMonthDayToId, convertToMonthDay } from \"../utils\";\nimport styles from \"../styles/pages/forecast-page.module.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ForecastPage = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    id\n  } = useParams();\n  const isLoading = useAppSelector(state => state.weather.isLoading);\n  const selectedDayForecast = useAppSelector(state => {\n    var _state$weather, _state$weather$weathe;\n    return (_state$weather = state.weather) === null || _state$weather === void 0 ? void 0 : (_state$weather$weathe = _state$weather.weather) === null || _state$weather$weathe === void 0 ? void 0 : _state$weather$weathe[id];\n  });\n  useEffect(() => {\n    if (id === convertMonthDayToId(convertToMonthDay())) {\n      dispatch(fetchWeather());\n    }\n  }, []);\n  const loadingTemplate = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"forecast-loading-card\",\n    className: styles.loadingSkeleton,\n    children: /*#__PURE__*/_jsxDEV(Skeleton, {\n      className: styles.loadingSkeleton\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loadingTemplate()\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(WeatherCard, {\n        className: styles.weather,\n        weather: selectedDayForecast.weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ForecastData, {\n        forecast: selectedDayForecast.forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n_s(ForecastPage, \"X2LEP4yvoHxcjf46HK2MGD/lVVQ=\", false, function () {\n  return [useAppDispatch, useParams, useAppSelector, useAppSelector];\n});\n_c = ForecastPage;\nvar _c;\n$RefreshReg$(_c, \"ForecastPage\");","map":{"version":3,"names":["React","useEffect","useParams","ForecastData","WeatherCard","useAppDispatch","useAppSelector","Skeleton","fetchWeather","convertMonthDayToId","convertToMonthDay","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","ForecastPage","_s","dispatch","id","isLoading","state","weather","selectedDayForecast","_state$weather","_state$weather$weathe","loadingTemplate","className","loadingSkeleton","children","fileName","_jsxFileName","lineNumber","columnNumber","title","forecast","_c","$RefreshReg$"],"sources":["/Users/maistor_dany/Projects/weather-app/src/pages/ForecastPage.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ForecastData, WeatherCard } from \"../components\";\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\nimport { Skeleton } from \"primereact/skeleton\";\nimport { fetchWeather } from \"../store/weather\";\nimport { convertMonthDayToId, convertToMonthDay } from \"../utils\";\nimport styles from \"../styles/pages/forecast-page.module.scss\";\nexport const ForecastPage: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { id } = useParams();\n  const isLoading = useAppSelector((state) => state.weather.isLoading);\n  const selectedDayForecast = useAppSelector(\n    (state) => state.weather?.weather?.[id as string],\n  );\n\n  useEffect(() => {\n    if (id === convertMonthDayToId(convertToMonthDay())) {\n      dispatch(fetchWeather());\n    }\n  }, []);\n\n  const loadingTemplate = () => (\n    <div data-testid=\"forecast-loading-card\" className={styles.loadingSkeleton}>\n      <Skeleton className={styles.loadingSkeleton} />\n    </div>\n  );\n\n  return (\n    <>\n      <h1 className={styles.title}>Forecast</h1>\n      {isLoading ? (\n        <>{loadingTemplate()}</>\n      ) : (\n        <>\n          <WeatherCard\n            className={styles.weather}\n            weather={selectedDayForecast.weather}\n          />\n          <ForecastData forecast={selectedDayForecast.forecast} />\n        </>\n      )}\n    </>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,YAAY,EAAEC,WAAW,QAAQ,eAAe;AACzD,SAASC,cAAc,EAAEC,cAAc,QAAQ,UAAU;AACzD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,mBAAmB,EAAEC,iBAAiB,QAAQ,UAAU;AACjE,OAAOC,MAAM,MAAM,2CAA2C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC/D,OAAO,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGb,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEc;EAAG,CAAC,GAAGjB,SAAS,CAAC,CAAC;EAC1B,MAAMkB,SAAS,GAAGd,cAAc,CAAEe,KAAK,IAAKA,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC;EACpE,MAAMG,mBAAmB,GAAGjB,cAAc,CACvCe,KAAK;IAAA,IAAAG,cAAA,EAAAC,qBAAA;IAAA,QAAAD,cAAA,GAAKH,KAAK,CAACC,OAAO,cAAAE,cAAA,wBAAAC,qBAAA,GAAbD,cAAA,CAAeF,OAAO,cAAAG,qBAAA,uBAAtBA,qBAAA,CAAyBN,EAAE,CAAW;EAAA,CACnD,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd,IAAIkB,EAAE,KAAKV,mBAAmB,CAACC,iBAAiB,CAAC,CAAC,CAAC,EAAE;MACnDQ,QAAQ,CAACV,YAAY,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkB,eAAe,GAAGA,CAAA,kBACtBb,OAAA;IAAK,eAAY,uBAAuB;IAACc,SAAS,EAAEhB,MAAM,CAACiB,eAAgB;IAAAC,QAAA,eACzEhB,OAAA,CAACN,QAAQ;MAACoB,SAAS,EAAEhB,MAAM,CAACiB;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5C,CACN;EAED,oBACEpB,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACEhB,OAAA;MAAIc,SAAS,EAAEhB,MAAM,CAACuB,KAAM;MAAAL,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzCb,SAAS,gBACRP,OAAA,CAAAE,SAAA;MAAAc,QAAA,EAAGH,eAAe,CAAC;IAAC,gBAAG,CAAC,gBAExBb,OAAA,CAAAE,SAAA;MAAAc,QAAA,gBACEhB,OAAA,CAACT,WAAW;QACVuB,SAAS,EAAEhB,MAAM,CAACW,OAAQ;QAC1BA,OAAO,EAAEC,mBAAmB,CAACD;MAAQ;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eACFpB,OAAA,CAACV,YAAY;QAACgC,QAAQ,EAAEZ,mBAAmB,CAACY;MAAS;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACxD,CACH;EAAA,eACD,CAAC;AAEP,CAAC;AAAChB,EAAA,CApCWD,YAAsB;EAAA,QAChBX,cAAc,EAChBH,SAAS,EACNI,cAAc,EACJA,cAAc;AAAA;AAAA8B,EAAA,GAJ/BpB,YAAsB;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}