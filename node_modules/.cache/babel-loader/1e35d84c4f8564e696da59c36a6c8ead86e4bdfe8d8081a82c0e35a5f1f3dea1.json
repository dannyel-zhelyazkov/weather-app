{"ast":null,"code":"var _jsxFileName = \"/Users/maistor_dany/Projects/weather-app/src/pages/ForecastPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ForecastData, WeatherCard } from \"../components\";\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\nimport { Skeleton } from \"primereact/skeleton\";\nimport { fetchWeather } from \"../store/weather\";\nimport { convertMonthDayToId, convertToMonthDay } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ForecastPage = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  const {\n    id\n  } = useParams();\n  const isLoading = useAppSelector(state => state.weather.isLoading);\n  const selectedDayForecast = useAppSelector(state => {\n    var _state$weather, _state$weather$weathe;\n    return (_state$weather = state.weather) === null || _state$weather === void 0 ? void 0 : (_state$weather$weathe = _state$weather.weather) === null || _state$weather$weathe === void 0 ? void 0 : _state$weather$weathe[id];\n  });\n  useEffect(() => {\n    if (id === convertMonthDayToId(convertToMonthDay())) {\n      console.log(\"opaa\");\n      dispatch(fetchWeather());\n    }\n  }, []);\n  const loadingTemplate = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"forecast-loading-card\",\n    style: {\n      width: \"250px\",\n      height: \"250px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: \"250px\",\n      width: \"250px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: loadingTemplate()\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(WeatherCard, {\n        style: {\n          marginBottom: \"4rem\"\n        },\n        weather: selectedDayForecast.weather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ForecastData, {\n        forecast: selectedDayForecast.forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n};\n_s(ForecastPage, \"X2LEP4yvoHxcjf46HK2MGD/lVVQ=\", false, function () {\n  return [useAppDispatch, useParams, useAppSelector, useAppSelector];\n});\n_c = ForecastPage;\nvar _c;\n$RefreshReg$(_c, \"ForecastPage\");","map":{"version":3,"names":["React","useEffect","useParams","ForecastData","WeatherCard","useAppDispatch","useAppSelector","Skeleton","fetchWeather","convertMonthDayToId","convertToMonthDay","jsxDEV","_jsxDEV","Fragment","_Fragment","ForecastPage","_s","dispatch","id","isLoading","state","weather","selectedDayForecast","_state$weather","_state$weather$weathe","console","log","loadingTemplate","style","width","height","children","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","forecast","_c","$RefreshReg$"],"sources":["/Users/maistor_dany/Projects/weather-app/src/pages/ForecastPage.tsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { ForecastData, WeatherCard } from \"../components\";\nimport { useAppDispatch, useAppSelector } from \"../hooks\";\nimport { Skeleton } from \"primereact/skeleton\";\nimport { fetchWeather } from \"../store/weather\";\nimport { convertMonthDayToId, convertToMonthDay } from \"../utils\";\nexport const ForecastPage: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { id } = useParams();\n  const isLoading = useAppSelector((state) => state.weather.isLoading);\n  const selectedDayForecast = useAppSelector(\n    (state) => state.weather?.weather?.[id as string],\n  );\n\n  useEffect(() => {\n    if (id === convertMonthDayToId(convertToMonthDay())) {\n      console.log(\"opaa\");\n      dispatch(fetchWeather());\n    }\n  }, []);\n\n  const loadingTemplate = () => (\n    <div\n      data-testid=\"forecast-loading-card\"\n      style={{ width: \"250px\", height: \"250px\" }}\n    >\n      <Skeleton height=\"250px\" width=\"250px\" />\n    </div>\n  );\n\n  return (\n    <>\n      <h1>Forecast</h1>\n      {isLoading ? (\n        <>{loadingTemplate()}</>\n      ) : (\n        <>\n          <WeatherCard\n            style={{ marginBottom: \"4rem\" }}\n            weather={selectedDayForecast.weather}\n          />\n          <ForecastData forecast={selectedDayForecast.forecast} />\n        </>\n      )}\n    </>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,YAAY,EAAEC,WAAW,QAAQ,eAAe;AACzD,SAASC,cAAc,EAAEC,cAAc,QAAQ,UAAU;AACzD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,SAASC,mBAAmB,EAAEC,iBAAiB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAClE,OAAO,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAMC,QAAQ,GAAGZ,cAAc,CAAC,CAAC;EACjC,MAAM;IAAEa;EAAG,CAAC,GAAGhB,SAAS,CAAC,CAAC;EAC1B,MAAMiB,SAAS,GAAGb,cAAc,CAAEc,KAAK,IAAKA,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC;EACpE,MAAMG,mBAAmB,GAAGhB,cAAc,CACvCc,KAAK;IAAA,IAAAG,cAAA,EAAAC,qBAAA;IAAA,QAAAD,cAAA,GAAKH,KAAK,CAACC,OAAO,cAAAE,cAAA,wBAAAC,qBAAA,GAAbD,cAAA,CAAeF,OAAO,cAAAG,qBAAA,uBAAtBA,qBAAA,CAAyBN,EAAE,CAAW;EAAA,CACnD,CAAC;EAEDjB,SAAS,CAAC,MAAM;IACd,IAAIiB,EAAE,KAAKT,mBAAmB,CAACC,iBAAiB,CAAC,CAAC,CAAC,EAAE;MACnDe,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBT,QAAQ,CAACT,YAAY,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMmB,eAAe,GAAGA,CAAA,kBACtBf,OAAA;IACE,eAAY,uBAAuB;IACnCgB,KAAK,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,eAE3CnB,OAAA,CAACL,QAAQ;MAACuB,MAAM,EAAC,OAAO;MAACD,KAAK,EAAC;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CACN;EAED,oBACEvB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAChBhB,SAAS,gBACRP,OAAA,CAAAE,SAAA;MAAAiB,QAAA,EAAGJ,eAAe,CAAC;IAAC,gBAAG,CAAC,gBAExBf,OAAA,CAAAE,SAAA;MAAAiB,QAAA,gBACEnB,OAAA,CAACR,WAAW;QACVwB,KAAK,EAAE;UAAEQ,YAAY,EAAE;QAAO,CAAE;QAChCf,OAAO,EAAEC,mBAAmB,CAACD;MAAQ;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eACFvB,OAAA,CAACT,YAAY;QAACkC,QAAQ,EAAEf,mBAAmB,CAACe;MAAS;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA,eACxD,CACH;EAAA,eACD,CAAC;AAEP,CAAC;AAACnB,EAAA,CAxCWD,YAAsB;EAAA,QAChBV,cAAc,EAChBH,SAAS,EACNI,cAAc,EACJA,cAAc;AAAA;AAAAgC,EAAA,GAJ/BvB,YAAsB;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}