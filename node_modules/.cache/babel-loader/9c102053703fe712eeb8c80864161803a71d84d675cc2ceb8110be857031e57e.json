{"ast":null,"code":"var _jsxFileName = \"/Users/maistor_dany/Projects/weather-app/src/pages/ForecastPage.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { WeatherCard } from \"../components/WeatherCard\";\nimport { useAppSelector } from \"../hooks\";\nimport { ForecastTable } from \"../components/ForecastTable\";\nimport styles from \"../styles/forecast-page.module.scss\";\nimport { convertMonthDayToId } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const ForecastPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const isToday = convertMonthDayToId(new Date().toString()) === id;\n  const todayWeather = useAppSelector(state => state.weather.weather);\n  const selectedDayForecast = useAppSelector(state => state.forecast.currentWeathers[Number(index)]);\n  const selectedDayWeather = useAppSelector(state => state.forecast.forecast);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: [selectedDayForecast === null || selectedDayForecast === void 0 ? void 0 : selectedDayForecast.date, \" 3 Hours Forecast\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WeatherCard, {\n      weather: isToday ? todayWeather : selectedDayForecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), selectedDayWeather && /*#__PURE__*/_jsxDEV(ForecastTable, {\n      todayForecast: selectedDayWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ForecastPage, \"uLH0i1KGkazOTWKgfE7qX9jdLAo=\", false, function () {\n  return [useParams, useAppSelector, useAppSelector, useAppSelector];\n});\n_c = ForecastPage;\nvar _c;\n$RefreshReg$(_c, \"ForecastPage\");","map":{"version":3,"names":["React","useParams","WeatherCard","useAppSelector","ForecastTable","styles","convertMonthDayToId","jsxDEV","_jsxDEV","Fragment","_Fragment","ForecastPage","_s","id","isToday","Date","toString","todayWeather","state","weather","selectedDayForecast","forecast","currentWeathers","Number","index","selectedDayWeather","children","className","title","date","fileName","_jsxFileName","lineNumber","columnNumber","todayForecast","_c","$RefreshReg$"],"sources":["/Users/maistor_dany/Projects/weather-app/src/pages/ForecastPage.tsx"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { WeatherCard } from \"../components/WeatherCard\";\nimport { useAppSelector } from \"../hooks\";\nimport { ForecastTable } from \"../components/ForecastTable\";\nimport styles from \"../styles/forecast-page.module.scss\";\nimport { convertMonthDayToId } from \"../utils\";\nexport const ForecastPage: React.FC = () => {\n  const { id } = useParams();\n  const isToday = convertMonthDayToId(new Date().toString()) === id;\n  const todayWeather = useAppSelector((state) => state.weather.weather);\n  const selectedDayForecast = useAppSelector(\n    (state) => state.forecast.currentWeathers[Number(index)],\n  );\n  const selectedDayWeather = useAppSelector((state) => state.forecast.forecast);\n\n  return (\n    <>\n      <h1 className={styles.title}>\n        {selectedDayForecast?.date} 3 Hours Forecast\n      </h1>\n      <WeatherCard weather={isToday ? todayWeather : selectedDayForecast} />\n      {selectedDayWeather && (\n        <ForecastTable todayForecast={selectedDayWeather} />\n      )}\n    </>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,cAAc,QAAQ,UAAU;AACzC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,OAAOC,MAAM,MAAM,qCAAqC;AACxD,SAASC,mBAAmB,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAC/C,OAAO,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAM;IAAEC;EAAG,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAC1B,MAAMa,OAAO,GAAGR,mBAAmB,CAAC,IAAIS,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,KAAKH,EAAE;EACjE,MAAMI,YAAY,GAAGd,cAAc,CAAEe,KAAK,IAAKA,KAAK,CAACC,OAAO,CAACA,OAAO,CAAC;EACrE,MAAMC,mBAAmB,GAAGjB,cAAc,CACvCe,KAAK,IAAKA,KAAK,CAACG,QAAQ,CAACC,eAAe,CAACC,MAAM,CAACC,KAAK,CAAC,CACzD,CAAC;EACD,MAAMC,kBAAkB,GAAGtB,cAAc,CAAEe,KAAK,IAAKA,KAAK,CAACG,QAAQ,CAACA,QAAQ,CAAC;EAE7E,oBACEb,OAAA,CAAAE,SAAA;IAAAgB,QAAA,gBACElB,OAAA;MAAImB,SAAS,EAAEtB,MAAM,CAACuB,KAAM;MAAAF,QAAA,GACzBN,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAES,IAAI,EAAC,mBAC7B;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACLzB,OAAA,CAACN,WAAW;MAACiB,OAAO,EAAEL,OAAO,GAAGG,YAAY,GAAGG;IAAoB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACrER,kBAAkB,iBACjBjB,OAAA,CAACJ,aAAa;MAAC8B,aAAa,EAAET;IAAmB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CACpD;EAAA,eACD,CAAC;AAEP,CAAC;AAACrB,EAAA,CApBWD,YAAsB;EAAA,QAClBV,SAAS,EAEHE,cAAc,EACPA,cAAc,EAGfA,cAAc;AAAA;AAAAgC,EAAA,GAP9BxB,YAAsB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}