{"ast":null,"code":"import { convertToHoursMinutes, convertToMonthDay } from \"./date.util\";\nexport const convertMonthDayToId = date => date.split(\" \").join(\"-\").toLowerCase();\nexport const reduceForecastData = data => data.list.reduce((acc, current) => {\n  const key = convertToMonthDay(current.dt_txt);\n  const weatherObj = {\n    time: convertToHoursMinutes(key),\n    temp: Math.round(current.main.temp),\n    icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${current.weather[0].icon}@2x.png`,\n    main: current.weather[0].main\n  };\n  if (!acc[key]) {\n    acc[key] = [weatherObj];\n    return acc;\n  }\n  acc[key].push(weatherObj);\n  return acc;\n}, {});\nexport const parseWeatherForecastData = data => {\n  const result = {};\n  const today = data.weatherData;\n  const todayWeather = data.weatherData.weather[0];\n  const todayKey = convertMonthDayToId(new Date().toString());\n  result[todayKey] = {\n    weather: {\n      date: convertToMonthDay(),\n      temp: Math.round(today.main.temp),\n      icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${todayWeather.icon}@2x.png`,\n      description: todayWeather.description.charAt(0).toUpperCase() + todayWeather.description.slice(1) // make the first letter of the description upper case\n    },\n\n    forecast: []\n  };\n  return result;\n};","map":{"version":3,"names":["convertToHoursMinutes","convertToMonthDay","convertMonthDayToId","date","split","join","toLowerCase","reduceForecastData","data","list","reduce","acc","current","key","dt_txt","weatherObj","time","temp","Math","round","main","icon","process","env","REACT_APP_WEATHER_ICONS_URL","weather","push","parseWeatherForecastData","result","today","weatherData","todayWeather","todayKey","Date","toString","description","charAt","toUpperCase","slice","forecast"],"sources":["/Users/maistor_dany/Projects/weather-app/src/utils/weather.util.ts"],"sourcesContent":["import { convertToHoursMinutes, convertToMonthDay } from \"./date.util\";\nimport { ForecastResponse, WeatherResponse } from \"../api\";\nimport { ForecastDisplay, WeatherData } from \"../store\";\nimport { ForecastData } from \"../api/types\";\n\nexport const convertMonthDayToId = (date: string) =>\n  date.split(\" \").join(\"-\").toLowerCase();\n\nexport const reduceForecastData = (data: ForecastResponse) =>\n  data.list.reduce(\n    (acc: { [key: string]: ForecastDisplay[] }, current: ForecastData) => {\n      const key = convertToMonthDay(current.dt_txt);\n      const weatherObj: ForecastDisplay = {\n        time: convertToHoursMinutes(key),\n        temp: Math.round(current.main.temp),\n        icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${current.weather[0].icon}@2x.png`,\n        main: current.weather[0].main,\n      };\n\n      if (!acc[key]) {\n        acc[key] = [weatherObj];\n\n        return acc;\n      }\n\n      acc[key].push(weatherObj);\n\n      return acc;\n    },\n    {},\n  );\n\nexport const parseWeatherForecastData = (data: {\n  weatherData: WeatherResponse;\n  forecastData: ForecastResponse;\n}): WeatherData => {\n  const result: WeatherData = {};\n\n  const today = data.weatherData;\n  const todayWeather = data.weatherData.weather[0];\n  const todayKey = convertMonthDayToId(new Date().toString());\n\n  result[todayKey] = {\n    weather: {\n      date: convertToMonthDay(),\n      temp: Math.round(today.main.temp),\n      icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${todayWeather.icon}@2x.png`,\n      description:\n        todayWeather.description.charAt(0).toUpperCase() +\n        todayWeather.description.slice(1), // make the first letter of the description upper case\n    },\n    forecast: [],\n  };\n\n  return result;\n};\n"],"mappings":"AAAA,SAASA,qBAAqB,EAAEC,iBAAiB,QAAQ,aAAa;AAKtE,OAAO,MAAMC,mBAAmB,GAAIC,IAAY,IAC9CA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,WAAW,CAAC,CAAC;AAEzC,OAAO,MAAMC,kBAAkB,GAAIC,IAAsB,IACvDA,IAAI,CAACC,IAAI,CAACC,MAAM,CACd,CAACC,GAAyC,EAAEC,OAAqB,KAAK;EACpE,MAAMC,GAAG,GAAGZ,iBAAiB,CAACW,OAAO,CAACE,MAAM,CAAC;EAC7C,MAAMC,UAA2B,GAAG;IAClCC,IAAI,EAAEhB,qBAAqB,CAACa,GAAG,CAAC;IAChCI,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACP,OAAO,CAACQ,IAAI,CAACH,IAAI,CAAC;IACnCI,IAAI,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,2BAA4B,IAAGZ,OAAO,CAACa,OAAO,CAAC,CAAC,CAAC,CAACJ,IAAK,SAAQ;IACpFD,IAAI,EAAER,OAAO,CAACa,OAAO,CAAC,CAAC,CAAC,CAACL;EAC3B,CAAC;EAED,IAAI,CAACT,GAAG,CAACE,GAAG,CAAC,EAAE;IACbF,GAAG,CAACE,GAAG,CAAC,GAAG,CAACE,UAAU,CAAC;IAEvB,OAAOJ,GAAG;EACZ;EAEAA,GAAG,CAACE,GAAG,CAAC,CAACa,IAAI,CAACX,UAAU,CAAC;EAEzB,OAAOJ,GAAG;AACZ,CAAC,EACD,CAAC,CACH,CAAC;AAEH,OAAO,MAAMgB,wBAAwB,GAAInB,IAGxC,IAAkB;EACjB,MAAMoB,MAAmB,GAAG,CAAC,CAAC;EAE9B,MAAMC,KAAK,GAAGrB,IAAI,CAACsB,WAAW;EAC9B,MAAMC,YAAY,GAAGvB,IAAI,CAACsB,WAAW,CAACL,OAAO,CAAC,CAAC,CAAC;EAChD,MAAMO,QAAQ,GAAG9B,mBAAmB,CAAC,IAAI+B,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;EAE3DN,MAAM,CAACI,QAAQ,CAAC,GAAG;IACjBP,OAAO,EAAE;MACPtB,IAAI,EAAEF,iBAAiB,CAAC,CAAC;MACzBgB,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACU,KAAK,CAACT,IAAI,CAACH,IAAI,CAAC;MACjCI,IAAI,EAAG,GAAEC,OAAO,CAACC,GAAG,CAACC,2BAA4B,IAAGO,YAAY,CAACV,IAAK,SAAQ;MAC9Ec,WAAW,EACTJ,YAAY,CAACI,WAAW,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAChDN,YAAY,CAACI,WAAW,CAACG,KAAK,CAAC,CAAC,CAAC,CAAE;IACvC,CAAC;;IACDC,QAAQ,EAAE;EACZ,CAAC;EAED,OAAOX,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}