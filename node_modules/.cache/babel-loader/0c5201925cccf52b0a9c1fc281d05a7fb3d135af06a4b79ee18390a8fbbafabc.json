{"ast":null,"code":"import { convertToHoursMinutes, convertToMonthDay } from \"./date.util\";\nimport moment from \"moment\";\nexport const convertMonthDayToId = date => date.split(\" \").join(\"-\").toLowerCase();\nexport const reduceForecastData = data => {\n  const reduced = data.list.reduce((acc, current) => {\n    const key = convertToMonthDay(current.dt_txt);\n    const forecast = {\n      time: convertToHoursMinutes(key),\n      temp: Math.round(current.main.temp),\n      icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${current.weather[0].icon}@2x.png`,\n      main: current.weather[0].main,\n      description: current.weather[0].description,\n      date: convertToMonthDay(key)\n    };\n    if (!acc[key]) {\n      acc[key] = [forecast];\n      return acc;\n    }\n    acc[key].push(forecast);\n    return acc;\n  }, {});\n  return Object.entries(reduced).splice(0, 4);\n};\nexport const parseWeatherForecastData = data => {\n  const result = {};\n  const today = data.weatherData;\n  const todayWeather = data.weatherData.weather[0];\n  const todayKey = convertMonthDayToId(new Date().toString());\n  const forecasts = reduceForecastData(data.forecastData);\n  result[todayKey] = {\n    weather: {\n      date: convertToMonthDay(),\n      temp: Math.round(today.main.temp),\n      icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${todayWeather.icon}@2x.png`,\n      description: todayWeather.description.charAt(0).toUpperCase() + todayWeather.description.slice(1),\n      // make the first letter of the description upper case\n      main: todayWeather.main,\n      time: convertToHoursMinutes()\n    },\n    forecast: forecasts[0][1]\n  };\n  forecasts.splice(1, 4).forEach(value => {\n    const weatherObj = value[1][Math.floor(moment().hour() / 3)]; // current time divided by 3 gives the index of the current's forecast weahter\n    result[value[0]] = {\n      weather: weatherObj,\n      forecast: value[1]\n    };\n  });\n  return result;\n};","map":{"version":3,"names":["convertToHoursMinutes","convertToMonthDay","moment","convertMonthDayToId","date","split","join","toLowerCase","reduceForecastData","data","reduced","list","reduce","acc","current","key","dt_txt","forecast","time","temp","Math","round","main","icon","process","env","REACT_APP_WEATHER_ICONS_URL","weather","description","push","Object","entries","splice","parseWeatherForecastData","result","today","weatherData","todayWeather","todayKey","Date","toString","forecasts","forecastData","charAt","toUpperCase","slice","forEach","value","weatherObj","floor","hour"],"sources":["/Users/maistor_dany/Projects/weather-app/src/utils/weather.util.ts"],"sourcesContent":["import { convertToHoursMinutes, convertToMonthDay } from \"./date.util\";\nimport { ForecastResponse, WeatherResponse } from \"../api\";\nimport { ForecastDisplay, WeatherData } from \"../store\";\nimport { ForecastData } from \"../api/types\";\nimport moment from \"moment\";\n\nexport const convertMonthDayToId = (date: string) =>\n  date.split(\" \").join(\"-\").toLowerCase();\n\nexport const reduceForecastData = (data: ForecastResponse) => {\n  const reduced = data.list.reduce(\n    (acc: { [key: string]: ForecastDisplay[] }, current: ForecastData) => {\n      const key = convertToMonthDay(current.dt_txt);\n      const forecast: ForecastDisplay = {\n        time: convertToHoursMinutes(key),\n        temp: Math.round(current.main.temp),\n        icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${current.weather[0].icon}@2x.png`,\n        main: current.weather[0].main,\n        description: current.weather[0].description,\n        date: convertToMonthDay(key),\n      };\n\n      if (!acc[key]) {\n        acc[key] = [forecast];\n\n        return acc;\n      }\n\n      acc[key].push(forecast);\n\n      return acc;\n    },\n    {},\n  );\n\n  return Object.entries(reduced).splice(0, 4);\n};\n\nexport const parseWeatherForecastData = (data: {\n  weatherData: WeatherResponse;\n  forecastData: ForecastResponse;\n}): WeatherData => {\n  const result: WeatherData = {};\n\n  const today = data.weatherData;\n  const todayWeather = data.weatherData.weather[0];\n  const todayKey = convertMonthDayToId(new Date().toString());\n\n  const forecasts = reduceForecastData(data.forecastData);\n\n  result[todayKey] = {\n    weather: {\n      date: convertToMonthDay(),\n      temp: Math.round(today.main.temp),\n      icon: `${process.env.REACT_APP_WEATHER_ICONS_URL}/${todayWeather.icon}@2x.png`,\n      description:\n        todayWeather.description.charAt(0).toUpperCase() +\n        todayWeather.description.slice(1), // make the first letter of the description upper case\n      main: todayWeather.main,\n      time: convertToHoursMinutes(),\n    },\n    forecast: forecasts[0][1],\n  };\n\n  forecasts.splice(1, 4).forEach((value) => {\n    const weatherObj = value[1][Math.floor(moment().hour() / 3)]; // current time divided by 3 gives the index of the current's forecast weahter\n    result[value[0]] = {\n      weather: weatherObj,\n      forecast: value[1],\n    };\n  });\n\n  return result;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}