{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { forecastService, weatherService } from \"../../api\";\nimport { STANDARD_UNIT, WEATHER_METRIC_KEY } from \"../../common/constants\";\nimport { convertMonthDayToId, convertToMonthDay, parseToCurrentWeather, parseWeatherForecastData } from \"../../utils\";\nconst initialState = {\n  locationName: \"\",\n  units: \"\",\n  weather: {},\n  isLoading: undefined,\n  error: undefined\n};\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    setWeatherAndForecast: (state, action) => {\n      state.locationName = action.payload.weatherData.name;\n      state.weather = parseWeatherForecastData({\n        weatherData: action.payload.weatherData,\n        forecastData: action.payload.forecastData\n      });\n      state.units = action.payload.units;\n      state.isLoading = false;\n    },\n    setWeather: (state, action) => {\n      const newObject = {\n        ...state.weather\n      };\n      newObject[convertMonthDayToId(convertToMonthDay())].weather = parseToCurrentWeather(action.payload);\n      state.weather = newObject;\n      state.isLoading = false;\n      state.error = undefined;\n    },\n    setUnits: (state, action) => {\n      localStorage.setItem(WEATHER_METRIC_KEY, action.payload);\n      state.units = action.payload;\n    },\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setError: (state, action) => {\n      console.log({\n        ...action.payload\n      });\n      // state.error = action.payload;\n    }\n  }\n});\n\nexport const fetchWeather = () => dispatch => {\n  navigator.geolocation.getCurrentPosition(async position => {\n    try {\n      dispatch(setIsLoading(true));\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      const units = localStorage.getItem(WEATHER_METRIC_KEY) || STANDARD_UNIT;\n      const responseWeather = await weatherService().getWeather({\n        lat,\n        lon,\n        units\n      });\n      dispatch(setWeather(responseWeather));\n    } catch (e) {\n      dispatch(setError(e));\n      dispatch(setIsLoading(false));\n    }\n  });\n};\nexport const fetchWeatherAndForecast = () => dispatch => {\n  navigator.geolocation.getCurrentPosition(async position => {\n    try {\n      dispatch(setIsLoading(true));\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      const units = localStorage.getItem(WEATHER_METRIC_KEY) || STANDARD_UNIT;\n      const responseWeather = await weatherService().getWeather({\n        lat,\n        lon,\n        units\n      });\n      const responseForecast = await forecastService().getForecast({\n        lat,\n        lon,\n        units\n      });\n      dispatch(setWeatherAndForecast({\n        units,\n        weatherData: responseWeather,\n        forecastData: responseForecast\n      }));\n    } catch (e) {\n      dispatch(setError(e));\n      dispatch(setIsLoading(false));\n    }\n  });\n};\nexport const {\n  setWeatherAndForecast,\n  setIsLoading,\n  setWeather,\n  setError,\n  setUnits\n} = weatherSlice.actions;\nexport const weatherReducer = weatherSlice.reducer;","map":{"version":3,"names":["createSlice","forecastService","weatherService","STANDARD_UNIT","WEATHER_METRIC_KEY","convertMonthDayToId","convertToMonthDay","parseToCurrentWeather","parseWeatherForecastData","initialState","locationName","units","weather","isLoading","undefined","error","weatherSlice","name","reducers","setWeatherAndForecast","state","action","payload","weatherData","forecastData","setWeather","newObject","setUnits","localStorage","setItem","setIsLoading","setError","console","log","fetchWeather","dispatch","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","getItem","responseWeather","getWeather","e","fetchWeatherAndForecast","responseForecast","getForecast","actions","weatherReducer","reducer"],"sources":["/Users/maistor_dany/Projects/weather-app/src/store/weather/weather.slice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { AppDispatch, WeatherData } from \"../index\";\nimport {\n  ForecastResponse,\n  forecastService,\n  WeatherResponse,\n  weatherService,\n} from \"../../api\";\nimport { STANDARD_UNIT, WEATHER_METRIC_KEY } from \"../../common/constants\";\nimport {\n  convertMonthDayToId,\n  convertToMonthDay,\n  parseToCurrentWeather,\n  parseWeatherForecastData,\n} from \"../../utils\";\nimport { AxiosError } from \"axios\";\n\nexport type WeatherState = {\n  locationName: string;\n  units: string;\n  weather: WeatherData;\n  isLoading?: boolean;\n  error?: string;\n};\n\nconst initialState: WeatherState = {\n  locationName: \"\",\n  units: \"\",\n  weather: {},\n  isLoading: undefined,\n  error: undefined,\n};\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    setWeatherAndForecast: (\n      state,\n      action: {\n        payload: {\n          units: string;\n          weatherData: WeatherResponse;\n          forecastData: ForecastResponse;\n        };\n      },\n    ) => {\n      state.locationName = action.payload.weatherData.name;\n      state.weather = parseWeatherForecastData({\n        weatherData: action.payload.weatherData,\n        forecastData: action.payload.forecastData,\n      });\n      state.units = action.payload.units;\n      state.isLoading = false;\n    },\n    setWeather: (state, action) => {\n      const newObject = { ...state.weather };\n      newObject[convertMonthDayToId(convertToMonthDay())].weather =\n        parseToCurrentWeather(action.payload);\n\n      state.weather = newObject;\n      state.isLoading = false;\n      state.error = undefined;\n    },\n    setUnits: (state, action) => {\n      localStorage.setItem(WEATHER_METRIC_KEY, action.payload);\n      state.units = action.payload;\n    },\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n    setError: (state, action) => {\n      console.log({ ...action.payload });\n      // state.error = action.payload;\n    },\n  },\n});\n\nexport const fetchWeather = () => (dispatch: AppDispatch) => {\n  navigator.geolocation.getCurrentPosition(async (position) => {\n    try {\n      dispatch(setIsLoading(true));\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n\n      const units = localStorage.getItem(WEATHER_METRIC_KEY) || STANDARD_UNIT;\n      const responseWeather = await weatherService().getWeather({\n        lat,\n        lon,\n        units,\n      });\n\n      dispatch(setWeather(responseWeather));\n    } catch (e) {\n      dispatch(setError(e));\n      dispatch(setIsLoading(false));\n    }\n  });\n};\n\nexport const fetchWeatherAndForecast = () => (dispatch: AppDispatch) => {\n  navigator.geolocation.getCurrentPosition(async (position) => {\n    try {\n      dispatch(setIsLoading(true));\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n\n      const units = localStorage.getItem(WEATHER_METRIC_KEY) || STANDARD_UNIT;\n      const responseWeather = await weatherService().getWeather({\n        lat,\n        lon,\n        units,\n      });\n      const responseForecast = await forecastService().getForecast({\n        lat,\n        lon,\n        units,\n      });\n\n      dispatch(\n        setWeatherAndForecast({\n          units,\n          weatherData: responseWeather,\n          forecastData: responseForecast,\n        }),\n      );\n    } catch (e) {\n      dispatch(setError(e));\n      dispatch(setIsLoading(false));\n    }\n  });\n};\n\nexport const {\n  setWeatherAndForecast,\n  setIsLoading,\n  setWeather,\n  setError,\n  setUnits,\n} = weatherSlice.actions;\n\nexport const weatherReducer = weatherSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}