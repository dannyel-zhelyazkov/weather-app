{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { forecastService, weatherService } from \"../../api\";\nimport { STANDARD_UNIT, WEATHER_METRIC_KEY } from \"../../common/constants\";\nimport { parseWeatherForecastData } from \"../../utils\";\nconst initialState = {\n  locationName: \"\",\n  weather: {},\n  isLoading: undefined\n};\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    setWeatherAndForecast: (state, action) => {\n      state.locationName = action.payload.weatherData.name;\n      state.weather = parseWeatherForecastData(action.payload);\n      state.isLoading = false;\n    },\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    }\n  }\n});\nexport const fetchWeather = () => dispatch => {\n  try {\n    dispatch(setIsLoading(true));\n    navigator.geolocation.getCurrentPosition(async position => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n      const units = localStorage.getItem(WEATHER_METRIC_KEY) || STANDARD_UNIT;\n      const responseWeather = await weatherService().getWeather({\n        lat,\n        lon,\n        units\n      });\n      const responseForecast = await forecastService().getForecast({\n        lat,\n        lon,\n        units\n      });\n      dispatch(setWeatherAndForecast({\n        weatherData: responseWeather,\n        forecastData: responseForecast\n      }));\n    });\n  } catch (e) {\n    dispatch(setIsLoading(false));\n  }\n};\nexport const {\n  setWeatherAndForecast,\n  setIsLoading\n} = weatherSlice.actions;\nexport const weatherReducer = weatherSlice.reducer;","map":{"version":3,"names":["createSlice","forecastService","weatherService","STANDARD_UNIT","WEATHER_METRIC_KEY","parseWeatherForecastData","initialState","locationName","weather","isLoading","undefined","weatherSlice","name","reducers","setWeatherAndForecast","state","action","payload","weatherData","setIsLoading","fetchWeather","dispatch","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","units","localStorage","getItem","responseWeather","getWeather","responseForecast","getForecast","forecastData","e","actions","weatherReducer","reducer"],"sources":["/Users/maistor_dany/Projects/weather-app/src/store/weather/weather.slice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { AppDispatch, WeatherData } from \"../index\";\nimport {\n  ForecastResponse,\n  forecastService,\n  WeatherResponse,\n  weatherService,\n} from \"../../api\";\nimport { STANDARD_UNIT, WEATHER_METRIC_KEY } from \"../../common/constants\";\nimport { parseWeatherForecastData } from \"../../utils\";\n\ntype WeatherState = {\n  locationName: string;\n  weather: WeatherData;\n  isLoading?: boolean;\n};\n\nconst initialState: WeatherState = {\n  locationName: \"\",\n  weather: {},\n  isLoading: undefined,\n};\n\nexport const weatherSlice = createSlice({\n  name: \"weather\",\n  initialState,\n  reducers: {\n    setWeatherAndForecast: (\n      state,\n      action: {\n        payload: {\n          weatherData: WeatherResponse;\n          forecastData: ForecastResponse;\n        };\n      },\n    ) => {\n      state.locationName = action.payload.weatherData.name;\n      state.weather = parseWeatherForecastData(action.payload);\n      state.isLoading = false;\n    },\n    setIsLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n  },\n});\n\nexport const fetchWeather = () => (dispatch: AppDispatch) => {\n  try {\n    dispatch(setIsLoading(true));\n    navigator.geolocation.getCurrentPosition(async (position) => {\n      const lat = position.coords.latitude;\n      const lon = position.coords.longitude;\n\n      const units = localStorage.getItem(WEATHER_METRIC_KEY) || STANDARD_UNIT;\n      const responseWeather = await weatherService().getWeather({\n        lat,\n        lon,\n        units,\n      });\n      const responseForecast = await forecastService().getForecast({\n        lat,\n        lon,\n        units,\n      });\n\n      dispatch(\n        setWeatherAndForecast({\n          weatherData: responseWeather,\n          forecastData: responseForecast,\n        }),\n      );\n    });\n  } catch (e) {\n    dispatch(setIsLoading(false));\n  }\n};\n\nexport const { setWeatherAndForecast, setIsLoading } = weatherSlice.actions;\n\nexport const weatherReducer = weatherSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,SAEEC,eAAe,EAEfC,cAAc,QACT,WAAW;AAClB,SAASC,aAAa,EAAEC,kBAAkB,QAAQ,wBAAwB;AAC1E,SAASC,wBAAwB,QAAQ,aAAa;AAQtD,MAAMC,YAA0B,GAAG;EACjCC,YAAY,EAAE,EAAE;EAChBC,OAAO,EAAE,CAAC,CAAC;EACXC,SAAS,EAAEC;AACb,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGX,WAAW,CAAC;EACtCY,IAAI,EAAE,SAAS;EACfN,YAAY;EACZO,QAAQ,EAAE;IACRC,qBAAqB,EAAEA,CACrBC,KAAK,EACLC,MAKC,KACE;MACHD,KAAK,CAACR,YAAY,GAAGS,MAAM,CAACC,OAAO,CAACC,WAAW,CAACN,IAAI;MACpDG,KAAK,CAACP,OAAO,GAAGH,wBAAwB,CAACW,MAAM,CAACC,OAAO,CAAC;MACxDF,KAAK,CAACN,SAAS,GAAG,KAAK;IACzB,CAAC;IACDU,YAAY,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACN,SAAS,GAAGO,MAAM,CAACC,OAAO;IAClC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMG,YAAY,GAAGA,CAAA,KAAOC,QAAqB,IAAK;EAC3D,IAAI;IACFA,QAAQ,CAACF,YAAY,CAAC,IAAI,CAAC,CAAC;IAC5BG,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAAC,MAAOC,QAAQ,IAAK;MAC3D,MAAMC,GAAG,GAAGD,QAAQ,CAACE,MAAM,CAACC,QAAQ;MACpC,MAAMC,GAAG,GAAGJ,QAAQ,CAACE,MAAM,CAACG,SAAS;MAErC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC7B,kBAAkB,CAAC,IAAID,aAAa;MACvE,MAAM+B,eAAe,GAAG,MAAMhC,cAAc,CAAC,CAAC,CAACiC,UAAU,CAAC;QACxDT,GAAG;QACHG,GAAG;QACHE;MACF,CAAC,CAAC;MACF,MAAMK,gBAAgB,GAAG,MAAMnC,eAAe,CAAC,CAAC,CAACoC,WAAW,CAAC;QAC3DX,GAAG;QACHG,GAAG;QACHE;MACF,CAAC,CAAC;MAEFV,QAAQ,CACNP,qBAAqB,CAAC;QACpBI,WAAW,EAAEgB,eAAe;QAC5BI,YAAY,EAAEF;MAChB,CAAC,CACH,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOG,CAAC,EAAE;IACVlB,QAAQ,CAACF,YAAY,CAAC,KAAK,CAAC,CAAC;EAC/B;AACF,CAAC;AAED,OAAO,MAAM;EAAEL,qBAAqB;EAAEK;AAAa,CAAC,GAAGR,YAAY,CAAC6B,OAAO;AAE3E,OAAO,MAAMC,cAAc,GAAG9B,YAAY,CAAC+B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}